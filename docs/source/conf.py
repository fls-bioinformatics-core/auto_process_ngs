# -*- coding: utf-8 -*-
#
# auto_process_ngs documentation build configuration file, created by
# sphinx-quickstart on Fri Feb 27 10:23:25 2015.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os
sys.path.append('../')

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'auto_process_ngs'
copyright = u'2015-2018 University of Manchester'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
sys.path.insert(0, os.path.abspath(os.path.join(os.getcwd(), '..')))
from auto_process_ngs import get_version
#
# The short X.Y version.
version = get_version()
# The full version, including alpha/beta/rc tags.
release = get_version()

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = []

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
# See https://stackoverflow.com/questions/18969093/how-to-include-the-toctree-in-the-sidebar-of-each-page
html_sidebars = { '**': ['globaltoc.html', 'relations.html', 'sourcelink.html', 'searchbox.html'] }

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'auto_process_ngsdoc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'auto_process_ngs.tex', u'auto\\_process\\_ngs Documentation',
   u'Peter Briggs', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'auto_process_ngs', u'auto_process_ngs Documentation',
     [u'Peter Briggs'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'auto_process_ngs', u'auto_process_ngs Documentation',
   u'Peter Briggs', 'auto_process_ngs', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# -- Make command reference documents ------------------------------------------

if not os.path.exists("reference"):
    os.mkdir("reference")

commandref = os.path.join(os.getcwd(),"reference","commands.rst")
with open(commandref,'w') as commands:
    commands.write("""
``auto_process`` commands
=========================

.. note::

   This documentation has been auto-generated from the
   command help

``auto_process.py`` implements the following commands:

.. contents:: :local:

""")

import subprocess
for subcmd in ("setup",
               "make_fastqs",
               "analyse_barcodes",
               "setup_analysis_dirs",
               "run_qc",
               "publish_qc",
               "archive",
               "report",
               "samplesheet",
               "merge_fastq_dirs",
               "update_fastq_stats",
               "import_project",
               "config",
               "params",
               "metadata",
               "readme",
               "clone"):
    # Capture the output
    help_text_file = "%s.help" % subcmd
    with open(help_text_file,'w') as fp:
        subprocess.call(['auto_process.py',subcmd,'--help'],stdout=fp)
    # Write into the document
    with open(commandref,'a') as fp:
        help_text = open(help_text_file,'r').read()
        title = "%s" % subcmd
        ref = ".. _commands_%s:" % subcmd
        fp.write("%s\n\n%s\n%s\n\n::\n\n" % (ref,
                                             title,
                                             "*"*len(title)))
        for line in help_text.split('\n'):
            fp.write("    %s\n" % line)
        os.remove(help_text_file)

# -- Make utility reference documents ------------------------------------------

utilityref = os.path.join(os.getcwd(),"reference","utilities.rst")
with open(utilityref,'w') as utilities:
    utilities.write("""
Utilities
=========

.. note::

   This documentation has been auto-generated from the
   command help

In addition to the main ``auto_process.py`` command, a number of utilities
are available:

.. contents:: :local:

""")
for utility in ("analyse_barcodes.py",
                "audit_projects.py",
                "download_fastqs.py",
                "demultiplex_icell8_atac.py",
                "fastq_statistics.py",
                "icell8_contamination_filter.py",
                "icell8_report.py",
                "icell8_stats.py",
                "manage_fastqs.py",
                "process_10xgenomics.py",
                "process_icell8.py",
                "run_qc.py",
                "split_icell8_fastqs.py",
                "update_project_metadata.py"):
    # Capture the output
    help_text_file = "%s.help" % utility
    with open(help_text_file,'w') as fp:
        subprocess.call([utility,'--help'],
                        stdout=fp,
                        stderr=subprocess.STDOUT)
    # Write into the document
    with open(utilityref,'a') as fp:
        help_text = open(help_text_file,'r').read()
        title = "%s" % utility
        ref = ".. _utilities_%s:" % os.path.splitext(utility)[0]
        fp.write("%s\n\n%s\n%s\n\n::\n\n" % (ref,
                                             title,
                                             "*"*len(title)))
        if not help_text:
            help_text = "No output from --help command?"
        for line in help_text.split('\n'):
            fp.write("    %s\n" % line)
        os.remove(help_text_file)

# -- Make developers reference documents ---------------------------------------

# Fetch a list of modules
# See https://stackoverflow.com/a/1708706/579925
from pkgutil import walk_packages
def get_modules(pkg):
    modlist = []
    for importer,modname,ispkg in walk_packages(path=pkg.__path__,
                                                prefix=pkg.__name__+'.',
                                                onerror=lambda x: None):
        modname = '.'.join(modname.split('.')[1:])
        modlist.append(modname)
    return modlist

import auto_process_ngs
modlist = get_modules(auto_process_ngs)

# Ensure the 'developers' subdir exists
devdocdir = os.path.join(os.getcwd(),"developers")
if not os.path.exists(devdocdir):
    print "Making %s" % devdocdir
    os.mkdir(devdocdir)

# Ensure the 'api_docs' subdir exists
api_doc_dir = os.path.join(os.getcwd(),
                           "developers",
                           "api_docs")
if not os.path.exists(api_doc_dir):
    print "Making %s" % api_doc_dir
    os.mkdir(api_doc_dir)

# Generate documents for each module
for modname in modlist:
    docname = modname.replace('.','_')
    docfile = os.path.join(api_doc_dir,
                           "%s.rst" % docname)
    print "Generating %s" % docfile
    with open(docfile,'w') as doc:
         title = "``auto_process_ngs.%s``" % modname
         doc.write("""%s
%s

.. automodule:: auto_process_ngs.%s
   :members:
""" % (title,'='*len(title),modname))

# Generate an index
api_index = os.path.join(api_doc_dir,"index.rst")
print "Writing %s" % api_index
with open(api_index,'w') as doc:
    doc.write("""=============================
Developers' API documentation
=============================

.. toctree::
   :maxdepth: 2

""")
    for modname in modlist:
        doc.write("   %s\n" % modname.replace('.','_'))


